// Generated by view binder compiler. Do not edit!
package com.zorinos.zorin_connect.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.zorinos.zorin_connect.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MprisControlBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton ffButton;

  @NonNull
  public final AppCompatImageView imageView;

  @NonNull
  public final MaterialButton loopButton;

  @NonNull
  public final LinearLayout mprisControlView;

  @NonNull
  public final MaterialButton nextButton;

  @NonNull
  public final TextView noPlayers;

  @NonNull
  public final TextView nowPlayingTextview;

  @NonNull
  public final MaterialButton playButton;

  @NonNull
  public final Spinner playerSpinner;

  @NonNull
  public final SeekBar positionSeek;

  @NonNull
  public final MaterialButton prevButton;

  @NonNull
  public final LinearLayout progressSlider;

  @NonNull
  public final TextView progressTextview;

  @NonNull
  public final MaterialButton rewButton;

  @NonNull
  public final MaterialButton shuffleButton;

  @NonNull
  public final MaterialButton stopButton;

  @NonNull
  public final TextView timeTextview;

  @NonNull
  public final LinearLayout volumeLayout;

  @NonNull
  public final SeekBar volumeSeek;

  private MprisControlBinding(@NonNull LinearLayout rootView, @NonNull MaterialButton ffButton,
      @NonNull AppCompatImageView imageView, @NonNull MaterialButton loopButton,
      @NonNull LinearLayout mprisControlView, @NonNull MaterialButton nextButton,
      @NonNull TextView noPlayers, @NonNull TextView nowPlayingTextview,
      @NonNull MaterialButton playButton, @NonNull Spinner playerSpinner,
      @NonNull SeekBar positionSeek, @NonNull MaterialButton prevButton,
      @NonNull LinearLayout progressSlider, @NonNull TextView progressTextview,
      @NonNull MaterialButton rewButton, @NonNull MaterialButton shuffleButton,
      @NonNull MaterialButton stopButton, @NonNull TextView timeTextview,
      @NonNull LinearLayout volumeLayout, @NonNull SeekBar volumeSeek) {
    this.rootView = rootView;
    this.ffButton = ffButton;
    this.imageView = imageView;
    this.loopButton = loopButton;
    this.mprisControlView = mprisControlView;
    this.nextButton = nextButton;
    this.noPlayers = noPlayers;
    this.nowPlayingTextview = nowPlayingTextview;
    this.playButton = playButton;
    this.playerSpinner = playerSpinner;
    this.positionSeek = positionSeek;
    this.prevButton = prevButton;
    this.progressSlider = progressSlider;
    this.progressTextview = progressTextview;
    this.rewButton = rewButton;
    this.shuffleButton = shuffleButton;
    this.stopButton = stopButton;
    this.timeTextview = timeTextview;
    this.volumeLayout = volumeLayout;
    this.volumeSeek = volumeSeek;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MprisControlBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MprisControlBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.mpris_control, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MprisControlBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ff_button;
      MaterialButton ffButton = ViewBindings.findChildViewById(rootView, id);
      if (ffButton == null) {
        break missingId;
      }

      id = R.id.imageView;
      AppCompatImageView imageView = ViewBindings.findChildViewById(rootView, id);
      if (imageView == null) {
        break missingId;
      }

      id = R.id.loop_button;
      MaterialButton loopButton = ViewBindings.findChildViewById(rootView, id);
      if (loopButton == null) {
        break missingId;
      }

      LinearLayout mprisControlView = (LinearLayout) rootView;

      id = R.id.next_button;
      MaterialButton nextButton = ViewBindings.findChildViewById(rootView, id);
      if (nextButton == null) {
        break missingId;
      }

      id = R.id.no_players;
      TextView noPlayers = ViewBindings.findChildViewById(rootView, id);
      if (noPlayers == null) {
        break missingId;
      }

      id = R.id.now_playing_textview;
      TextView nowPlayingTextview = ViewBindings.findChildViewById(rootView, id);
      if (nowPlayingTextview == null) {
        break missingId;
      }

      id = R.id.play_button;
      MaterialButton playButton = ViewBindings.findChildViewById(rootView, id);
      if (playButton == null) {
        break missingId;
      }

      id = R.id.player_spinner;
      Spinner playerSpinner = ViewBindings.findChildViewById(rootView, id);
      if (playerSpinner == null) {
        break missingId;
      }

      id = R.id.positionSeek;
      SeekBar positionSeek = ViewBindings.findChildViewById(rootView, id);
      if (positionSeek == null) {
        break missingId;
      }

      id = R.id.prev_button;
      MaterialButton prevButton = ViewBindings.findChildViewById(rootView, id);
      if (prevButton == null) {
        break missingId;
      }

      id = R.id.progress_slider;
      LinearLayout progressSlider = ViewBindings.findChildViewById(rootView, id);
      if (progressSlider == null) {
        break missingId;
      }

      id = R.id.progress_textview;
      TextView progressTextview = ViewBindings.findChildViewById(rootView, id);
      if (progressTextview == null) {
        break missingId;
      }

      id = R.id.rew_button;
      MaterialButton rewButton = ViewBindings.findChildViewById(rootView, id);
      if (rewButton == null) {
        break missingId;
      }

      id = R.id.shuffle_button;
      MaterialButton shuffleButton = ViewBindings.findChildViewById(rootView, id);
      if (shuffleButton == null) {
        break missingId;
      }

      id = R.id.stop_button;
      MaterialButton stopButton = ViewBindings.findChildViewById(rootView, id);
      if (stopButton == null) {
        break missingId;
      }

      id = R.id.time_textview;
      TextView timeTextview = ViewBindings.findChildViewById(rootView, id);
      if (timeTextview == null) {
        break missingId;
      }

      id = R.id.volume_layout;
      LinearLayout volumeLayout = ViewBindings.findChildViewById(rootView, id);
      if (volumeLayout == null) {
        break missingId;
      }

      id = R.id.volume_seek;
      SeekBar volumeSeek = ViewBindings.findChildViewById(rootView, id);
      if (volumeSeek == null) {
        break missingId;
      }

      return new MprisControlBinding((LinearLayout) rootView, ffButton, imageView, loopButton,
          mprisControlView, nextButton, noPlayers, nowPlayingTextview, playButton, playerSpinner,
          positionSeek, prevButton, progressSlider, progressTextview, rewButton, shuffleButton,
          stopButton, timeTextview, volumeLayout, volumeSeek);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
